{"ast":null,"code":"var _jsxFileName = \"/Users/tendainyandoro/Documents/School/interaction-checker/src/store/appContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport AppContext from './appContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst appReducer = (state, action) => {\n  if (action.type === 'ADD_DRUG') {\n    const newDrug = { ...action.drug,\n      id: new Date().getTime()\n    };\n    const updatedDrugs = [...state.addedDrugs, newDrug];\n    return { ...state,\n      addedDrugs: updatedDrugs\n    };\n  } else if (action.type === 'ERROR') {\n    return { ...state,\n      modal: action.error\n    };\n  } else if (action.type === 'HIDE_MODAL') {\n    return { ...state,\n      modal: null\n    };\n  } else if (action.type === 'REMOVE_DRUG') {\n    const updatedDrugs = state.addedDrugs.filter(item => item.id !== action.id);\n    return { ...state,\n      addedDrugs: updatedDrugs\n    };\n  } else if (action.type === 'REMOVE_ALL') {\n    return { ...state,\n      addedDrugs: []\n    };\n  } else if (action.type === 'INTERACTIONS') {\n    return { ...state,\n      modal: action.interactions\n    };\n  } else if (action.type === 'LOADING') {\n    return { ...state,\n      isLoading: true\n    };\n  } else if (action.type === 'LOADED') {\n    return { ...state,\n      isLoading: false\n    };\n  } else {\n    return { ...state\n    };\n  }\n};\n\nconst defaultAppState = {\n  addedDrugs: [],\n  modal: null,\n  isLoading: false\n};\n\nconst AppContextProvider = props => {\n  _s();\n\n  const [appState, dispatchApp] = useReducer(appReducer, defaultAppState);\n\n  const errorHandler = error => {\n    dispatchApp({\n      type: 'ERROR',\n      error: error\n    });\n  };\n\n  const addDrugHandler = drugName => {\n    if (appState.addedDrugs.length === 10) {\n      errorHandler({\n        title: 'Too many drugs added',\n        message: ['You can only run check for 10 drugs at once.'],\n        content: 'error'\n      });\n      return;\n    }\n\n    async function fetchRxcui() {\n      dispatchApp({\n        type: 'LOADING'\n      });\n\n      try {\n        const url = 'https://rxnav.nlm.nih.gov/REST/rxcui.json?name=';\n        const response = await fetch(url + drugName);\n        const data = await response.json();\n        let rxcui = null;\n\n        if (data.idGroup.hasOwnProperty('rxnormId')) {\n          rxcui = data.idGroup.rxnormId[0];\n        }\n\n        if (rxcui) {\n          dispatchApp({\n            type: 'ADD_DRUG',\n            drug: {\n              name: drugName,\n              rxcui: rxcui\n            }\n          });\n        } else {\n          errorHandler({\n            title: 'Drug not found',\n            message: ['Sorry, entered name was not found in database. Perhaps this drug is listed under a different name.'],\n            content: 'error'\n          });\n        }\n      } catch (error) {\n        errorHandler({\n          title: 'Error',\n          message: ['Sorry, failed to connect to database.'],\n          content: 'error'\n        });\n      }\n\n      dispatchApp({\n        type: 'LOADED'\n      });\n    }\n\n    fetchRxcui();\n  };\n\n  const checkInteractionHandler = e => {\n    e.preventDefault();\n\n    if (appState.addedDrugs.length < 2) {\n      errorHandler({\n        title: 'No drugs added',\n        message: ['Please add at least two drug names to the list.'],\n        content: 'error'\n      });\n      return;\n    }\n\n    dispatchApp({\n      type: 'LOADING'\n    });\n\n    async function fetchInteractions() {\n      try {\n        let url = 'https://rxnav.nlm.nih.gov/REST/interaction/list.json?rxcuis=';\n\n        for (let i = 0; i < appState.addedDrugs.length; i++) {\n          if (i === 0) {\n            url += appState.addedDrugs[i].rxcui;\n          } else {\n            url += `+${appState.addedDrugs[i].rxcui}`;\n          }\n        }\n\n        const response = await fetch(url);\n        const data = await response.json();\n        let interactions;\n\n        if (!data.fullInteractionTypeGroup) {\n          interactions = ['No interactions found.'];\n        } else {\n          interactions = data.fullInteractionTypeGroup[0].fullInteractionType.map(el => el.interactionPair[0].description);\n        }\n\n        dispatchApp({\n          type: 'INTERACTIONS',\n          interactions: {\n            title: 'Check result',\n            message: interactions,\n            content: 'interactions'\n          }\n        });\n      } catch (error) {\n        errorHandler({\n          title: 'Error',\n          message: ['Sorry, failed to connect to database.'],\n          content: 'error'\n        });\n      }\n\n      dispatchApp({\n        type: 'LOADED'\n      });\n    }\n\n    fetchInteractions();\n  };\n\n  const removeDrugHandler = id => {\n    dispatchApp({\n      type: 'REMOVE_DRUG',\n      id: id\n    });\n  };\n\n  const hideModalHandler = () => {\n    dispatchApp({\n      type: 'HIDE_MODAL'\n    });\n  };\n\n  const removeAllHandler = () => {\n    dispatchApp({\n      type: 'REMOVE_ALL'\n    });\n  };\n\n  const appContext = {\n    addedDrugs: appState.addedDrugs,\n    modal: appState.modal,\n    isLoading: appState.isLoading,\n    addDrug: addDrugHandler,\n    removeDrug: removeDrugHandler,\n    hideModal: hideModalHandler,\n    removeAll: removeAllHandler,\n    checkInteractions: checkInteractionHandler,\n    errorHandler: errorHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: appContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 3\n  }, this);\n};\n\n_s(AppContextProvider, \"buWJhFUH0BrgpGZBqvt1qqgWqkY=\");\n\n_c = AppContextProvider;\nexport default AppContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"sources":["/Users/tendainyandoro/Documents/School/interaction-checker/src/store/appContextProvider.js"],"names":["React","useReducer","AppContext","appReducer","state","action","type","newDrug","drug","id","Date","getTime","updatedDrugs","addedDrugs","modal","error","filter","item","interactions","isLoading","defaultAppState","AppContextProvider","props","appState","dispatchApp","errorHandler","addDrugHandler","drugName","length","title","message","content","fetchRxcui","url","response","fetch","data","json","rxcui","idGroup","hasOwnProperty","rxnormId","name","checkInteractionHandler","e","preventDefault","fetchInteractions","i","fullInteractionTypeGroup","fullInteractionType","map","el","interactionPair","description","removeDrugHandler","hideModalHandler","removeAllHandler","appContext","addDrug","removeDrug","hideModal","removeAll","checkInteractions","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport AppContext from './appContext';\n\nconst appReducer = (state, action) => {\n\tif (action.type === 'ADD_DRUG') {\n\t\tconst newDrug = { ...action.drug, id: new Date().getTime() };\n\t\tconst updatedDrugs = [...state.addedDrugs, newDrug];\n\t\treturn { ...state, addedDrugs: updatedDrugs };\n\t} else if (action.type === 'ERROR') {\n\t\treturn { ...state, modal: action.error };\n\t} else if (action.type === 'HIDE_MODAL') {\n\t\treturn { ...state, modal: null };\n\t} else if (action.type === 'REMOVE_DRUG') {\n\t\tconst updatedDrugs = state.addedDrugs.filter(\n\t\t\t(item) => item.id !== action.id\n\t\t);\n\t\treturn { ...state, addedDrugs: updatedDrugs };\n\t} else if (action.type === 'REMOVE_ALL') {\n\t\treturn { ...state, addedDrugs: [] };\n\t} else if (action.type === 'INTERACTIONS') {\n\t\treturn { ...state, modal: action.interactions };\n\t} else if (action.type === 'LOADING') {\n\t\treturn { ...state, isLoading: true };\n\t} else if (action.type === 'LOADED') {\n\t\treturn { ...state, isLoading: false };\n\t} else {\n\t\treturn { ...state };\n\t}\n};\nconst defaultAppState = {\n\taddedDrugs: [],\n\tmodal: null,\n\tisLoading: false,\n};\n\nconst AppContextProvider = (props) => {\n\tconst [appState, dispatchApp] = useReducer(appReducer, defaultAppState);\n\n\tconst errorHandler = (error) => {\n\t\tdispatchApp({\n\t\t\ttype: 'ERROR',\n\t\t\terror: error,\n\t\t});\n\t};\n\n\tconst addDrugHandler = (drugName) => {\n\n        if (appState.addedDrugs.length ===10) {\n\t\t\terrorHandler({\n\t\t\t\ttitle: 'Too many drugs added',\n\t\t\t\tmessage: ['You can only run check for 10 drugs at once.'],\n\t\t\t\tcontent: 'error',\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tasync function fetchRxcui() {\n\t\t\tdispatchApp({ type: 'LOADING' });\n\t\t\ttry {\n\t\t\t\tconst url = 'https://rxnav.nlm.nih.gov/REST/rxcui.json?name=';\n\t\t\t\tconst response = await fetch(url + drugName);\n\t\t\t\tconst data = await response.json();\n\t\t\t\tlet rxcui = null;\n\n\t\t\t\tif (data.idGroup.hasOwnProperty('rxnormId')) {\n\t\t\t\t\trxcui = data.idGroup.rxnormId[0];\n\t\t\t\t}\n\n\t\t\t\tif (rxcui) {\n\t\t\t\t\tdispatchApp({\n\t\t\t\t\t\ttype: 'ADD_DRUG',\n\t\t\t\t\t\tdrug: { name: drugName, rxcui: rxcui },\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\terrorHandler({\n\t\t\t\t\t\ttitle: 'Drug not found',\n\t\t\t\t\t\tmessage: [\n\t\t\t\t\t\t\t'Sorry, entered name was not found in database. Perhaps this drug is listed under a different name.',\n\t\t\t\t\t\t],\n\t\t\t\t\t\tcontent: 'error',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\terrorHandler({\n\t\t\t\t\ttitle: 'Error',\n\t\t\t\t\tmessage: ['Sorry, failed to connect to database.'],\n\t\t\t\t\tcontent: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t\tdispatchApp({ type: 'LOADED' });\n\t\t}\n\t\tfetchRxcui();\n\t};\n\n\tconst checkInteractionHandler = (e) => {\n\t\te.preventDefault();\n\n\t\tif (appState.addedDrugs.length < 2) {\n\t\t\terrorHandler({\n\t\t\t\ttitle: 'No drugs added',\n\t\t\t\tmessage: ['Please add at least two drug names to the list.'],\n\t\t\t\tcontent: 'error',\n\t\t\t});\n\t\t\treturn;\n\t\t}\n        \n\t\tdispatchApp({ type: 'LOADING' });\n\n\t\tasync function fetchInteractions() {\n\t\t\ttry {\n\t\t\t\tlet url =\n\t\t\t\t\t'https://rxnav.nlm.nih.gov/REST/interaction/list.json?rxcuis=';\n\n\t\t\t\tfor (let i = 0; i < appState.addedDrugs.length; i++) {\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\turl += appState.addedDrugs[i].rxcui;\n\t\t\t\t\t} else {\n\t\t\t\t\t\turl += `+${appState.addedDrugs[i].rxcui}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst response = await fetch(url);\n\t\t\t\tconst data = await response.json();\n\t\t\t\tlet interactions;\n\n\t\t\t\tif (!data.fullInteractionTypeGroup) {\n\t\t\t\t\tinteractions = ['No interactions found.'];\n\t\t\t\t} else {\n\t\t\t\t\tinteractions =\n\t\t\t\t\t\tdata.fullInteractionTypeGroup[0].fullInteractionType.map(\n\t\t\t\t\t\t\t(el) => el.interactionPair[0].description\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdispatchApp({\n\t\t\t\t\ttype: 'INTERACTIONS',\n\t\t\t\t\tinteractions: {\n\t\t\t\t\t\ttitle: 'Check result',\n\t\t\t\t\t\tmessage: interactions,\n\t\t\t\t\t\tcontent: 'interactions',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\terrorHandler({\n\t\t\t\t\ttitle: 'Error',\n\t\t\t\t\tmessage: ['Sorry, failed to connect to database.'],\n\t\t\t\t\tcontent: 'error',\n\t\t\t\t});\n\t\t\t}\n\t\t\tdispatchApp({ type: 'LOADED' });\n\t\t}\n\t\tfetchInteractions();\n\t};\n\n\tconst removeDrugHandler = (id) => {\n\t\tdispatchApp({ type: 'REMOVE_DRUG', id: id });\n\t};\n\n\tconst hideModalHandler = () => {\n\t\tdispatchApp({ type: 'HIDE_MODAL' });\n\t};\n\n\tconst removeAllHandler = () => {\n\t\tdispatchApp({ type: 'REMOVE_ALL' });\n\t};\n\n\tconst appContext = {\n\t\taddedDrugs: appState.addedDrugs,\n\t\tmodal: appState.modal,\n\t\tisLoading: appState.isLoading,\n\t\taddDrug: addDrugHandler,\n\t\tremoveDrug: removeDrugHandler,\n\t\thideModal: hideModalHandler,\n\t\tremoveAll: removeAllHandler,\n\t\tcheckInteractions: checkInteractionHandler,\n        errorHandler:errorHandler,\n\t};\n\n\treturn (\n\t\t<AppContext.Provider value={appContext}>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t);\n};\n\nexport default AppContextProvider;\n"]},"metadata":{},"sourceType":"module"}