{"ast":null,"code":"var _jsxFileName = \"/Users/tendainyandoro/Documents/School/inexamed-ddi-checker/src/components/SearchForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport Button from '../UI/Button';\nimport AppContext from '../store/appContext';\nimport classes from './SearchForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchForm = () => {\n  _s();\n\n  const [suggestionsList, setSuggestionsList] = useState([]); //full list of suggestions fetched from API\n\n  const [searchInput, setSearchInput] = useState('');\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [showSuggestions, setShowSuggestion] = useState(false);\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const activeSuggestionRef = useRef();\n  const ctx = useContext(AppContext); //fetch suggestions list from API\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const fetchSuggestions = async () => {\n      const response = await fetch('https://rxnav.nlm.nih.gov/REST/displaynames.json', {\n        signal: abortController.signal\n      });\n      const data = await response.json();\n      setSuggestionsList(data.displayTermsList.term);\n    };\n\n    fetchSuggestions();\n    return () => {\n      abortController.abort();\n    };\n  }, []); //control state of input, return filtered search suggestions\n\n  const inputChangeHandler = e => {\n    setSearchInput(e.target.value);\n    setShowSuggestion(true);\n\n    if (e.target.value.length > 1) {\n      setFilteredSuggestions(suggestionsList.filter(item => item.startsWith(e.target.value)));\n    } else {\n      setFilteredSuggestions([]);\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (searchInput.trim().length === 0) {\n      ctx.errorHandler({\n        title: 'Empty input field',\n        message: ['Please enter a drug name.']\n      });\n      return;\n    }\n\n    ctx.addDrug(searchInput);\n    setSearchInput('');\n  }; //scrolls the suggestions list to make active suggestion visible\n\n\n  useEffect(() => {\n    if (!showSuggestions || !activeSuggestionRef.current) {\n      return;\n    }\n\n    activeSuggestionRef.current.scrollIntoView(false);\n  }, [showSuggestions]); //select suggestion with a click\n\n  const suggestionClickHandler = e => {\n    setActiveSuggestion(0);\n    setSearchInput(e.target.innerText);\n    setShowSuggestion(false);\n    setFilteredSuggestions([]);\n  }; //select suggestion with arrow keys\n\n\n  const suggestionKeydownHandler = e => {\n    //blur input on esc\n    if (e.keyCode === 27) {\n      e.target.blur();\n    }\n\n    if (filteredSuggestions.length === 0) {\n      return;\n    } //arrow up\n\n\n    if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      setActiveSuggestion(current => current - 1); //arrow down\n    } else if (e.keyCode === 40) {\n      if (activeSuggestion === filteredSuggestions.length - 1) {\n        return;\n      }\n\n      setActiveSuggestion(current => current + 1); //enter\n    } else if (e.keyCode === 13 && showSuggestions) {\n      setSearchInput(filteredSuggestions[activeSuggestion]);\n      setActiveSuggestion(0);\n      setShowSuggestion(false);\n    }\n  }; //helper function\n\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes['form-control'],\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes['form__label'],\n          children: \"Enter drug name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes['input-control'],\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: classes['form__input'],\n            onChange: inputChangeHandler,\n            onFocus: () => {\n              setShowSuggestion(true);\n            },\n            onClick: () => {\n              setShowSuggestion(true);\n            },\n            onBlur: () => {\n              sleep(300).then(() => setShowSuggestion(false));\n            } //sleep function prevents onblur to trigger before onclick on list item\n            ,\n            onKeyDown: suggestionKeydownHandler,\n            value: searchInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: classes['suggestion-list'],\n            children: filteredSuggestions && showSuggestions && filteredSuggestions.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: filteredSuggestions.indexOf(item) === activeSuggestion ? classes['suggestion-active'] : '',\n              onClick: suggestionClickHandler,\n              ref: filteredSuggestions.indexOf(item) === activeSuggestion ? activeSuggestionRef : null,\n              children: item\n            }, filteredSuggestions.indexOf(item), false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 10\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SearchForm, \"+nkh75milUMaqFKRgRrTFrKg2U0=\");\n\n_c = SearchForm;\nexport default SearchForm; // todos:\n// -split into separate components\n//-aria\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"sources":["/Users/tendainyandoro/Documents/School/inexamed-ddi-checker/src/components/SearchForm.js"],"names":["React","useState","useEffect","useContext","useRef","Button","AppContext","classes","SearchForm","suggestionsList","setSuggestionsList","searchInput","setSearchInput","filteredSuggestions","setFilteredSuggestions","showSuggestions","setShowSuggestion","activeSuggestion","setActiveSuggestion","activeSuggestionRef","ctx","abortController","AbortController","fetchSuggestions","response","fetch","signal","data","json","displayTermsList","term","abort","inputChangeHandler","e","target","value","length","filter","item","startsWith","submitHandler","preventDefault","trim","errorHandler","title","message","addDrug","current","scrollIntoView","suggestionClickHandler","innerText","suggestionKeydownHandler","keyCode","blur","sleep","ms","Promise","resolve","setTimeout","form","then","map","indexOf"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD,CADwB,CACoC;;AAC5D,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,mBAAD,EAAsBC,sBAAtB,IAAgDb,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACc,eAAD,EAAkBC,iBAAlB,IAAuCf,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,CAAC,CAAD,CAAxD;AAGA,QAAMkB,mBAAmB,GAAGf,MAAM,EAAlC;AAEA,QAAMgB,GAAG,GAAGjB,UAAU,CAACG,UAAD,CAAtB,CAVwB,CAYxB;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMmB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AACA,UAAMC,gBAAgB,GAAG,YAAY;AACpC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC3B,kDAD2B,EACwB;AAAEC,QAAAA,MAAM,EAAEL,eAAe,CAACK;AAA1B,OADxB,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAlB,MAAAA,kBAAkB,CAACiB,IAAI,CAACE,gBAAL,CAAsBC,IAAvB,CAAlB;AACA,KAND;;AAOAP,IAAAA,gBAAgB;AAEhB,WAAO,MAAM;AACZF,MAAAA,eAAe,CAACU,KAAhB;AACE,KAFH;AAGA,GAdQ,EAcN,EAdM,CAAT,CAbwB,CA6BxB;;AACA,QAAMC,kBAAkB,GAAIC,CAAD,IAAO;AACjCrB,IAAAA,cAAc,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACAnB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;;AAEA,QAAIiB,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC9BtB,MAAAA,sBAAsB,CACrBL,eAAe,CAAC4B,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,CAACC,UAAL,CAAgBN,CAAC,CAACC,MAAF,CAASC,KAAzB,CAAjC,CADqB,CAAtB;AAGA,KAJD,MAIO;AACNrB,MAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACA;AACD,GAXD;;AAaA,QAAM0B,aAAa,GAAIP,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACQ,cAAF;;AACA,QAAI9B,WAAW,CAAC+B,IAAZ,GAAmBN,MAAnB,KAA8B,CAAlC,EAAqC;AACpChB,MAAAA,GAAG,CAACuB,YAAJ,CAAiB;AAChBC,QAAAA,KAAK,EAAE,mBADS;AAEhBC,QAAAA,OAAO,EAAE,CAAC,2BAAD;AAFO,OAAjB;AAIA;AACA;;AACDzB,IAAAA,GAAG,CAAC0B,OAAJ,CAAYnC,WAAZ;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACA,GAXD,CA3CwB,CAuDxB;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACa,eAAD,IAAoB,CAACI,mBAAmB,CAAC4B,OAA7C,EAAsD;AACrD;AACA;;AACD5B,IAAAA,mBAAmB,CAAC4B,OAApB,CAA4BC,cAA5B,CAA2C,KAA3C;AACA,GALQ,EAKN,CAACjC,eAAD,CALM,CAAT,CAxDwB,CA+DxB;;AACA,QAAMkC,sBAAsB,GAAIhB,CAAD,IAAO;AACrCf,IAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACAN,IAAAA,cAAc,CAACqB,CAAC,CAACC,MAAF,CAASgB,SAAV,CAAd;AACAlC,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,IAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACA,GALD,CAhEwB,CAsExB;;;AACA,QAAMqC,wBAAwB,GAAIlB,CAAD,IAAO;AACvC;AACA,QAAIA,CAAC,CAACmB,OAAF,KAAc,EAAlB,EAAsB;AACrBnB,MAAAA,CAAC,CAACC,MAAF,CAASmB,IAAT;AACA;;AACD,QAAIxC,mBAAmB,CAACuB,MAApB,KAA+B,CAAnC,EAAsC;AACrC;AACA,KAPsC,CAQvC;;;AACA,QAAIH,CAAC,CAACmB,OAAF,KAAc,EAAlB,EAAsB;AACrB,UAAInC,gBAAgB,KAAK,CAAzB,EAA4B;AAC3B;AACA;;AACDC,MAAAA,mBAAmB,CAAE6B,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAnB,CAJqB,CAMrB;AACA,KAPD,MAOO,IAAId,CAAC,CAACmB,OAAF,KAAc,EAAlB,EAAsB;AAC5B,UAAInC,gBAAgB,KAAKJ,mBAAmB,CAACuB,MAApB,GAA6B,CAAtD,EAAyD;AACxD;AACA;;AACDlB,MAAAA,mBAAmB,CAAE6B,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAnB,CAJ4B,CAM5B;AACA,KAPM,MAOA,IAAId,CAAC,CAACmB,OAAF,KAAc,EAAd,IAAoBrC,eAAxB,EAAyC;AAC/CH,MAAAA,cAAc,CAACC,mBAAmB,CAACI,gBAAD,CAApB,CAAd;AACAC,MAAAA,mBAAmB,CAAC,CAAD,CAAnB;AACAF,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA;AACD,GA5BD,CAvEwB,CAqGxB;;;AACA,WAASsC,KAAT,CAAeC,EAAf,EAAmB;AAClB,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAP;AACA;;AAED,sBACC,QAAC,KAAD,CAAO,QAAP;AAAA,2BAEC;AAAM,MAAA,SAAS,EAAEhD,OAAO,CAACoD,IAAzB;AAA+B,MAAA,QAAQ,EAAEnB,aAAzC;AAAA,8BACC;AAAK,QAAA,SAAS,EAAEjC,OAAO,CAAC,cAAD,CAAvB;AAAA,gCACC;AAAO,UAAA,SAAS,EAAEA,OAAO,CAAC,aAAD,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAK,UAAA,SAAS,EAAEA,OAAO,CAAC,eAAD,CAAvB;AAAA,kCACC;AACC,YAAA,SAAS,EAAEA,OAAO,CAAC,aAAD,CADnB;AAEC,YAAA,QAAQ,EAAEyB,kBAFX;AAGC,YAAA,OAAO,EAAE,MAAM;AACdhB,cAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,aALF;AAMC,YAAA,OAAO,EAAE,MAAM;AACdA,cAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA,aARF;AASC,YAAA,MAAM,EAAE,MAAM;AACbsC,cAAAA,KAAK,CAAC,GAAD,CAAL,CAAWM,IAAX,CAAgB,MAAM5C,iBAAiB,CAAC,KAAD,CAAvC;AACA,aAXF,CAWI;AAXJ;AAYC,YAAA,SAAS,EAAEmC,wBAZZ;AAaC,YAAA,KAAK,EAAExC;AAbR;AAAA;AAAA;AAAA;AAAA,kBADD,eAgBC;AAAI,YAAA,SAAS,EAAEJ,OAAO,CAAC,iBAAD,CAAtB;AAAA,sBACEM,mBAAmB,IACnBE,eADA,IAEAF,mBAAmB,CAACgD,GAApB,CAAyBvB,IAAD,iBACvB;AAEC,cAAA,SAAS,EACRzB,mBAAmB,CAACiD,OAApB,CAA4BxB,IAA5B,MAAsCrB,gBAAtC,GACGV,OAAO,CAAC,mBAAD,CADV,GAEG,EALL;AAOC,cAAA,OAAO,EAAE0C,sBAPV;AAQC,cAAA,GAAG,EACFpC,mBAAmB,CAACiD,OAApB,CAA4BxB,IAA5B,MAAsCrB,gBAAtC,GACGE,mBADH,GAEG,IAXL;AAAA,wBAcEmB;AAdF,eACMzB,mBAAmB,CAACiD,OAApB,CAA4BxB,IAA5B,CADN;AAAA;AAAA;AAAA;AAAA,oBADD;AAHF;AAAA;AAAA;AAAA;AAAA,kBAhBD;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eA2CC,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAFD;AAAA;AAAA;AAAA;AAAA,UADD;AAkDA,CA5JD;;GAAM9B,U;;KAAAA,U;AA8JN,eAAeA,UAAf,C,CAEA;AACA;AACA","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\nimport Button from '../UI/Button';\nimport AppContext from '../store/appContext';\nimport classes from './SearchForm.module.css';\n\nconst SearchForm = () => {\n\tconst [suggestionsList, setSuggestionsList] = useState([]); //full list of suggestions fetched from API\n\tconst [searchInput, setSearchInput] = useState('');\n\tconst [filteredSuggestions, setFilteredSuggestions] = useState([]);\n\tconst [showSuggestions, setShowSuggestion] = useState(false);\n\tconst [activeSuggestion, setActiveSuggestion] = useState(0);\n\n\n\tconst activeSuggestionRef = useRef();\n\n\tconst ctx = useContext(AppContext);\n\n\t//fetch suggestions list from API\n\tuseEffect(() => {\n\t\tconst abortController = new AbortController();\n\t\tconst fetchSuggestions = async () => {\n\t\t\tconst response = await fetch(\n\t\t\t\t'https://rxnav.nlm.nih.gov/REST/displaynames.json',{ signal: abortController.signal }\n\t\t\t);\n\t\t\tconst data = await response.json();\n\t\t\tsetSuggestionsList(data.displayTermsList.term);\n\t\t};\n\t\tfetchSuggestions();\n\n\t\treturn () => {\n\t\t\tabortController.abort();\n\t\t  };\n\t}, []);\n\n\t//control state of input, return filtered search suggestions\n\tconst inputChangeHandler = (e) => {\n\t\tsetSearchInput(e.target.value);\n\t\tsetShowSuggestion(true);\n\n\t\tif (e.target.value.length > 1) {\n\t\t\tsetFilteredSuggestions(\n\t\t\t\tsuggestionsList.filter((item) => item.startsWith(e.target.value))\n\t\t\t);\n\t\t} else {\n\t\t\tsetFilteredSuggestions([]);\n\t\t}\n\t};\n\n\tconst submitHandler = (e) => {\n\t\te.preventDefault();\n\t\tif (searchInput.trim().length === 0) {\n\t\t\tctx.errorHandler({\n\t\t\t\ttitle: 'Empty input field',\n\t\t\t\tmessage: ['Please enter a drug name.'],\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tctx.addDrug(searchInput);\n\t\tsetSearchInput('');\n\t};\n\t//scrolls the suggestions list to make active suggestion visible\n\tuseEffect(() => {\n\t\tif (!showSuggestions || !activeSuggestionRef.current) {\n\t\t\treturn;\n\t\t}\n\t\tactiveSuggestionRef.current.scrollIntoView(false);\n\t}, [showSuggestions]);\n\n\t//select suggestion with a click\n\tconst suggestionClickHandler = (e) => {\n\t\tsetActiveSuggestion(0);\n\t\tsetSearchInput(e.target.innerText);\n\t\tsetShowSuggestion(false);\n\t\tsetFilteredSuggestions([]);\n\t};\n\t//select suggestion with arrow keys\n\tconst suggestionKeydownHandler = (e) => {\n\t\t//blur input on esc\n\t\tif (e.keyCode === 27) {\n\t\t\te.target.blur();\n\t\t}\n\t\tif (filteredSuggestions.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t//arrow up\n\t\tif (e.keyCode === 38) {\n\t\t\tif (activeSuggestion === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetActiveSuggestion((current) => current - 1);\n\n\t\t\t//arrow down\n\t\t} else if (e.keyCode === 40) {\n\t\t\tif (activeSuggestion === filteredSuggestions.length - 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetActiveSuggestion((current) => current + 1);\n\n\t\t\t//enter\n\t\t} else if (e.keyCode === 13 && showSuggestions) {\n\t\t\tsetSearchInput(filteredSuggestions[activeSuggestion]);\n\t\t\tsetActiveSuggestion(0);\n\t\t\tsetShowSuggestion(false);\n\t\t}\n\t};\n\n\t//helper function\n\tfunction sleep(ms) {\n\t\treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t\n\t\t\t<form className={classes.form} onSubmit={submitHandler}>\n\t\t\t\t<div className={classes['form-control']}>\n\t\t\t\t\t<label className={classes['form__label']}>Enter drug name:</label>\n\t\t\t\t\t<div className={classes['input-control']}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName={classes['form__input']}\n\t\t\t\t\t\t\tonChange={inputChangeHandler}\n\t\t\t\t\t\t\tonFocus={() => {\n\t\t\t\t\t\t\t\tsetShowSuggestion(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsetShowSuggestion(true);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonBlur={() => {\n\t\t\t\t\t\t\t\tsleep(300).then(() => setShowSuggestion(false));\n\t\t\t\t\t\t\t}} //sleep function prevents onblur to trigger before onclick on list item\n\t\t\t\t\t\t\tonKeyDown={suggestionKeydownHandler}\n\t\t\t\t\t\t\tvalue={searchInput}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ul className={classes['suggestion-list']}>\n\t\t\t\t\t\t\t{filteredSuggestions &&\n\t\t\t\t\t\t\t\tshowSuggestions &&\n\t\t\t\t\t\t\t\tfilteredSuggestions.map((item) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={filteredSuggestions.indexOf(item)}\n\t\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\tfilteredSuggestions.indexOf(item) === activeSuggestion\n\t\t\t\t\t\t\t\t\t\t\t\t? classes['suggestion-active']\n\t\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tonClick={suggestionClickHandler}\n\t\t\t\t\t\t\t\t\t\tref={\n\t\t\t\t\t\t\t\t\t\t\tfilteredSuggestions.indexOf(item) === activeSuggestion\n\t\t\t\t\t\t\t\t\t\t\t\t? activeSuggestionRef\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Button type=\"submit\">Add</Button>\n\t\t\t</form>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SearchForm;\n\n// todos:\n// -split into separate components\n//-aria\n\n"]},"metadata":{},"sourceType":"module"}